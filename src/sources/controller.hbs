/* eslint-disable */
// @ts-nocheck

import { Controller, UseGuards, UseInterceptors } from "@nestjs/common";
import { {{SourceName}} } from "./sources/{{SourceName}}";
import { Controller, Get, Query, UseGuards, UseInterceptors } from "@nestjs/common";
import { AccountService } from "./account/account.service";
import { ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';
import { AccountService } from "./account/account.service";

@Controller("{{SourceName}}")
@UseInterceptors(ClientPolicyCheck, UserPolicyCheck, TrackUsage)
@ApiTags("sources")
@UseGuards(AuthGuard("custom"))
export class {{SourceName}}Controller {
  source: {{SourceName}};
  constructor(private accountService: AccountService) {
    this.source = new {{SourceName}}();
  }
  {{#each resources}}
  @Get("{{ResourceName}}")
  @ApiQuery({{{ResourceInputSchema}}})
  @ApiResponse({{{ResourceOutputSchema}}})
  {{ResourceName}}(@Query() query, @AuthenticatedClient() httpClient): Promise<any> {
    const resource = this.source.resources["{{ResourceName}}"]
    const action = resource.getAction();
    return action(httpClient, query);
  }
  {{/each}}

  
  @Get("authUrl")
  getAuthUrl(): string {
    return this.source.getAuthUrl();
  }

  @Get("callback")
  getAuthCallback(@Request() request, @CurrentAccount()): Promise<void> {
    const credentials = this.source.getAuthCallback(request);
    return this.accountService.create('oauth2', credentials);
  }
}
